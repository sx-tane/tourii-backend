generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider                  = "prisma-erd-generator"
//   theme                     = "forest"
//   output                    = "../prisma/docs/tourii-db-erd.md"
//   includeRelationFromFields = true
// }

generator markdown {
  provider = "prisma-markdown"
  output   = "../prisma/docs/tourii-db-docs.md"
  title    = "Tourii Database"
}

datasource db {
  provider = "postgresql"
  url      = env("MIGRATION_URL")
}

model id_sequence {
  key       String @id
  ts_prefix String
  counter   Int    @default(1)
}

enum UserRoleType {
  USER
  MODERATOR
  ADMIN
}

enum PassportType {
  BONJIN
  AMATSUKAMI
  KUNITSUKAMI
  YOKAI
}

enum OnchainItemType {
  UNKNOWN
  LOG_NFT
  DIGITAL_PASSPORT
  PERK
}

enum OnchainItemStatus {
  ACTIVE
  USED
  EXPIRED
  PENDING
}

enum BlockchainType {
  UNKNOWN
  VARA
  CAMINO
}

enum LevelType {
  BONJIN
  E_CLASS_AMATSUKAMI
  E_CLASS_KUNITSUKAMI
  E_CLASS_YOKAI
  D_CLASS_AMATSUKAMI
  D_CLASS_KUNITSUKAMI
  D_CLASS_YOKAI
  C_CLASS_AMATSUKAMI
  C_CLASS_KUNITSUKAMI
  C_CLASS_YOKAI
  B_CLASS_AMATSUKAMI
  B_CLASS_KUNITSUKAMI
  B_CLASS_YOKAI
  A_CLASS_AMATSUKAMI
  A_CLASS_KUNITSUKAMI
  A_CLASS_YOKAI
  S_CLASS_AMATSUKAMI
  S_CLASS_KUNITSUKAMI
  S_CLASS_YOKAI
}

enum StoryStatus {
  UNREAD
  IN_PROGRESS
  COMPLETED
}

enum QuestStatus {
  AVAILABLE
  ONGOING
  COMPLETED
}

enum ItemStatus {
  SUCCESS
  FAILED
}

enum ItemType {
  ONCHAIN
  OFFCHAIN
}

enum KendamaSeason {
  NORMAL
  EVENT
}

///-----------------------------------------------------------
/// USERS & AUTHENTICATION
///-----------------------------------------------------------
/// User entity.
///
/// Represents a registered user of the Tourii application with all their
/// authentication information, platform connections, wallet addresses, and
/// user-specific settings. Users can authenticate through various methods
/// including Discord, Twitter, and Google.
///
/// Users can have multiple achievements, onchain items, and can participate in
/// various activities tracked through logs. Premium status and role types
/// define access levels and privileges in the system.
///
/// @namespace Users
/// @author Tourii Team
model user {
  //----
  // IDENTIFICATION
  //----
  /// User ID with format TSUYYYYMM-rand1-DDHHMI-rand2-obfCounter
  ///
  /// @format custom
  user_id                 String  @id @default(dbgenerated("generate_user_id()")) @db.VarChar(255)
  
  /// Tourii System Username
  ///
  /// @minLength 3
  /// @maxLength 255
  username                String  @unique
  
  //----
  // AUTHENTICATION METHODS
  //----
  /// Discord System User Id
  ///
  /// Unique identifier from Discord authentication
  discord_id              String? @unique
  
  /// Discord User Name
  ///
  /// @maxLength 255
  discord_username        String? @db.VarChar(255)
  
  /// Twitter System User Id
  ///
  /// Unique identifier from Twitter authentication
  twitter_id              String? @unique
  
  /// Twitter User Name
  ///
  /// @maxLength 255
  twitter_username        String? @db.VarChar(255)
  
  /// Google System User Id
  ///
  /// User's email address from Google authentication
  google_email            String? @unique
  
  /// User Email
  ///
  /// @format email
  email                   String? @unique
  
  /// User Password
  ///
  /// Hashed password for native authentication
  password                String
  
  //----
  // BLOCKCHAIN & WALLET
  //----
  /// Digital passport Wallet Address
  ///
  /// Blockchain wallet address for digital passport
  passport_wallet_address String? @unique
  
  /// Travel perk NFT Wallet Address
  ///
  /// Blockchain wallet address for travel perks
  perks_wallet_address    String  @unique @default("''")
  
  //----
  // USER METRICS & STATUS
  //----
  /// User's latest IP address
  ///
  /// @format ipv4
  latest_ip_address       String?
  
  /// User is premium or not
  ///
  /// Indicates whether user has premium subscription
  is_premium              Boolean @default(false)
  
  /// Total number of quests completed by user
  total_quest_completed   Int     @default(0)
  
  /// Total travel distance recorded by user
  ///
  /// @unit kilometers
  total_travel_distance   Float   @default(0.0)
  
  /// User role in the system
  role                    UserRoleType @default(USER)
  
  /// Initial registration timestamp
  registered_at           DateTime     @default(now())
  
  /// When user joined Discord
  discord_joined_at       DateTime     @default(now())
  
  /// Indicates if user is banned from the platform
  is_banned               Boolean      @default(false)
  
  //----
  // SYSTEM FIELDS
  //----
  /// Soft delete flag
  del_flag                Boolean  @default(false)
  
  /// ID of user who created this record
  ins_user_id             String   @default("user")
  
  /// Timestamp of record creation
  ins_date_time           DateTime @default(now())
  
  /// ID of user who last updated this record
  upd_user_id             String   @default("user")
  
  /// Timestamp of last record update
  upd_date_time           DateTime @default(now())
  
  /// Request ID for tracing
  request_id              String?
  
  //----
  // RELATIONS
  //----
  /// User achievements earned
  user_achievements     user_achievement[]
  
  /// User's detailed information
  user_info             user_info?
  
  /// User's blockchain items
  user_onchain_item     user_onchain_item[]
  
  /// History of item claims
  user_item_claim_log   user_item_claim_log[]
  
  /// Discord activity tracking
  discord_activity_log  discord_activity_log[]
  
  /// Discord roles assigned
  discord_user_roles     discord_user_roles[]
  
  /// Discord roles rewarded to user
  discord_rewarded_roles discord_rewarded_roles[]
  
  /// Invitation logs
  invite_log             invite_log[]
}

model user_achievement {
  user_achievement_id    String   @id @default(dbgenerated("generate_achievement_id()")) @db.VarChar(255)
  user_id                String
  achievement_name       String   @db.VarChar(255)
  description            String   @db.VarChar(255)
  icon_url               String?  @db.VarChar(255)
  achievement_type       String?  @db.VarChar(255)
  magatama_point_awarded Int      @default(0)
  del_flag               Boolean  @default(false)
  ins_user_id            String   @default("user")
  ins_date_time          DateTime @default(now())
  upd_user_id            String   @default("user")
  upd_date_time          DateTime @default(now())
  request_id             String?
  user                   user     @relation(fields: [user_id], references: [user_id])
}

model user_info {
  user_info_id               String        @id @default(dbgenerated("generate_user_info_id()")) @db.VarChar(255)
  user_id                    String        @unique
  digital_passport_address   String        @unique @default("''")
  log_nft_address            String        @default("''")
  user_digital_passport_type PassportType? @default(BONJIN)
  level                      String?       @db.VarChar(255)
  discount_rate              Float?
  magatama_points            Int           @default(0)
  magatama_bags              Int?          @default(0)
  total_quest_completed      Int           @default(0)
  total_travel_distance      Float         @default(0.0)
  is_premium                 Boolean       @default(false)
  prayer_bead                Int?          @default(0)
  sword                      Int?          @default(0)
  orge_mask                  Int?          @default(0)
  del_flag                   Boolean       @default(false)
  ins_user_id                String        @default("user")
  ins_date_time              DateTime      @default(now())
  upd_user_id                String        @default("user")
  upd_date_time              DateTime      @default(now())
  request_id                 String?
  user                       user          @relation(fields: [user_id], references: [user_id])
}

model user_onchain_item {
  user_onchain_item_id String            @id @default(dbgenerated("generate_user_onchain_item_id()")) @db.VarChar(255)
  user_id              String?           @default("user")
  item_type            OnchainItemType   @default(UNKNOWN)
  item_txn_hash        String            @unique // digital_passport_address or log_nft_address or perk_address
  blockchain_type      BlockchainType    @default(UNKNOWN) // CAMINO perk VARA log_nft & digital_passport
  minted_at            DateTime?         @default(now()) @db.Timestamp(6)
  onchain_item_id      String?           @unique
  status               OnchainItemStatus @default(ACTIVE)
  del_flag             Boolean           @default(false)
  ins_user_id          String            @default("user")
  ins_date_time        DateTime          @default(now())
  upd_user_id          String            @default("user")
  upd_date_time        DateTime          @default(now())
  request_id           String?
  user                 user?             @relation(fields: [user_id], references: [user_id])
}

model user_item_claim_log {
  user_item_claim_log_id String     @id @default(dbgenerated("generate_user_item_claim_log_id()")) @db.VarChar(255)
  user_id                String
  onchain_item_id        String?    @db.VarChar(255)
  offchain_item_name     String?    @db.VarChar(255)
  item_amount            Int        @default(0)
  item_details           String?
  type                   ItemType   @default(OFFCHAIN)
  claimed_at             DateTime?  @default(now()) @db.Timestamp(6)
  status                 ItemStatus @default(SUCCESS)
  error_msg              String?    @db.VarChar(255)
  del_flag               Boolean    @default(false)
  ins_user_id            String     @default("user")
  ins_date_time          DateTime   @default(now())
  upd_user_id            String     @default("user")
  upd_date_time          DateTime   @default(now())
  request_id             String?
  user                   user       @relation(fields: [user_id], references: [user_id])
}

model invite_log {
  id                     Int      @id(map: "invite_reward_log_pkc") @default(autoincrement())
  user_id                String
  invitee_discord_id     String? // Discord System User Id
  invitee_user_id        String? // Tourii System User Id
  magatama_point_awarded Int      @default(0)
  del_flag               Boolean  @default(false)
  ins_user_id            String   @default("user")
  ins_date_time          DateTime @default(now())
  upd_user_id            String   @default("user")
  upd_date_time          DateTime @default(now())
  request_id             String?
  user                   user     @relation(fields: [user_id], references: [user_id])
}

model discord_activity_log {
  discord_activity_log_id String   @id @default(dbgenerated("generate_discord_activity_log_id()")) @db.VarChar(255)
  user_id                 String
  activity_type           String   @db.VarChar(255)
  magatama_point_awarded  Int
  activity_details        String?
  del_flag                Boolean  @default(false)
  ins_user_id             String   @default("user")
  ins_date_time           DateTime @default(now())
  upd_user_id             String   @default("user")
  upd_date_time           DateTime @default(now())
  request_id              String?
  user                    user?    @relation(fields: [user_id], references: [user_id])
}

model discord_rewarded_roles {
  discord_rewarded_roles_id String   @id @default(dbgenerated("generate_discord_rewarded_roles_id()")) @db.VarChar(255)
  user_id                   String
  role_id                   BigInt
  magatama_point_awarded    Int
  del_flag                  Boolean  @default(false)
  ins_user_id               String   @default("user")
  ins_date_time             DateTime @default(now())
  upd_user_id               String   @default("user")
  upd_date_time             DateTime @default(now())
  request_id                String?
  user                      user     @relation(fields: [user_id], references: [user_id])
}

model discord_user_roles {
  discord_user_roles_id String        @id @default(dbgenerated("generate_discord_user_roles_id()")) @db.VarChar(255)
  user_id               String
  role_id               BigInt
  del_flag              Boolean       @default(false)
  ins_user_id           String        @default("user")
  ins_date_time         DateTime      @default(now())
  upd_user_id           String        @default("user")
  upd_date_time         DateTime      @default(now())
  request_id            String?
  discord_roles         discord_roles @relation(fields: [role_id], references: [role_id])
  user                  user          @relation(fields: [user_id], references: [user_id])
}

// Master Table
model discord_roles {
  role_id            BigInt               @id @unique
  name               String               @unique @db.VarChar(255)
  del_flag           Boolean              @default(false)
  ins_user_id        String               @default("user")
  ins_date_time      DateTime             @default(now())
  upd_user_id        String               @default("user")
  upd_date_time      DateTime             @default(now())
  request_id         String?
  discord_user_roles discord_user_roles[]
}

model onchain_item_catalog {
  onchain_item_id  String          @id @default(dbgenerated("generate_onchain_item_catalog_id()")) @db.VarChar(255)
  item_type        OnchainItemType @default(UNKNOWN)
  nft_name         String          @db.VarChar(255)
  nft_description  String          @db.VarChar(255)
  image_url        String          @db.VarChar(255)
  contract_address String          @db.VarChar(255)
  token_id         String?         @db.VarChar(255) // only use by digital_passport
  metadata_url     String?         @db.VarChar(255) // only use by perk and log_nft
  attributes       Json[]          @db.JsonB // only use by perk and log_nft
  release_date     DateTime?       @default(now())
  expiry_date      DateTime?       @default(now())
  max_supply       Int?            @default(0)
  del_flag         Boolean         @default(false)
  ins_user_id      String          @default("user")
  ins_date_time    DateTime        @default(now())
  upd_user_id      String          @default("user")
  upd_date_time    DateTime        @default(now())
  request_id       String?
}

model level_requirement_master {
  level                   LevelType @id
  discord_role_id         String?   @db.VarChar(255)
  min_get_magatama_points Int
  max_get_magatama_points Int
  total_onchain_item      Int       @default(0)
  prayer_bead             Int       @default(0)
  sword                   Int       @default(0)
  orge_mask               Int       @default(0)
  del_flag                Boolean   @default(false)
  ins_user_id             String    @default("user")
  ins_date_time           DateTime? @default(now()) @db.Timestamp(6)
  upd_user_id             String    @default("user")
  upd_date_time           DateTime? @default(now()) @db.Timestamp(6)
  request_id              String?
}

model kendama_random_range {
  season        KendamaSeason @id @default(NORMAL)
  landed        Decimal       @db.Decimal
  missed        Decimal       @db.Decimal
  win_rate      Decimal       @db.Decimal
  del_flag      Boolean       @default(false)
  ins_user_id   String        @default("user")
  ins_date_time DateTime      @default(now())
  upd_user_id   String        @default("user")
  upd_date_time DateTime      @default(now())
  request_id    String?
}
